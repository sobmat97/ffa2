// freak-fight-server/index.js
const express            = require("express");
const path               = require("path");
const cors               = require("cors");
const { GoogleSpreadsheet } = require("google-spreadsheet");
const creds              = require("./credentials.json");
const multer             = require("multer");

const app  = express();
const PORT = process.env.PORT || 3001;
const SHEET_ID = "1qUPE8PXticebtACDkqPK7xBf1c-NZKzeQtx7db-fAAM";

app.use(cors());
app.use(express.json());

// Helper do Google Sheets
async function getSheet(title) {
  const doc = new GoogleSpreadsheet(SHEET_ID);
  await doc.useServiceAccountAuth(creds);
  await doc.loadInfo();
  if (title) {
    const key = Object.keys(doc.sheetsByTitle)
      .find(k => k.toLowerCase() === title.toLowerCase());
    if (!key) throw new Error(`Sheet "${title}" not found.`);
    return doc.sheetsByTitle[key];
  }
  return doc.sheetsByIndex[0];
}

// Konfiguracja Multer (upload avatara)
const avatarStorage = multer.diskStorage({
  destination: (req, file, cb) =>
    cb(null, path.join(__dirname, "public", "avatars")),
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    cb(null, `${req.params.id}${ext}`);
  }
});
const upload = multer({
  storage: avatarStorage,
  fileFilter: (_, file, cb) =>
    file.mimetype.startsWith("image/") ? cb(null, true) : cb(new Error("Tylko obrazy"))
});

// --- API: FIGHTERS ---
app.get("/api/fighters", async (req, res) => {
  try {
    const sheet = await getSheet();
    const rows  = await sheet.getRows();
    const data = rows.map(r => ({
      id:           r._rowNumber,
      name:         r["IMIÄ˜ I NAZWISKO"] || "",
      nickname:     r["PSEUDONIM"]       || "",
      organization: r["ORGANIZACJA"]     || "",
      lastFight:    r["OSTATNIA WALKA"]  || "",
      weight:       r["WAGA"]            || "",
      email:        r["E-MAIL"]          || "",
      photoUrl:     r["PHOTO_URL"]       || ""
    }));
    res.json(data);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: e.message });
  }
});

app.post("/api/fighters/:id/avatar", upload.single("avatar"), async (req, res) => {
  try {
    const id  = req.params.id;
    const url = `/avatars/${req.file.filename}`;
    const sheet = await getSheet();
    const rows  = await sheet.getRows();
    const row   = rows.find(r => String(r._rowNumber) === id);
    if (row) {
      row["PHOTO_URL"] = url;
      await row.save();
    }
    res.json({ photoUrl: url });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: e.message });
  }
});

// --- API: EVENTS (1v1) ---
app.get("/api/events", async (req, res) => {
  try {
    const sheet = await getSheet("Events");
    const rows  = await sheet.getRows();
    const data = rows.map(r => ({
      id:           r._rowNumber,
      participants: (r["Uczestnicy"]||"").split(";").map(s=>s.trim()).filter(Boolean),
      fighter1:     r["Zawodnik 1"] || "",
      fighter2:     r["Zawodnik 2"] || "",
      winner:       r["ZwyciÄ™zca"]    || "",
      gala:         r["Gala"]         || "",
      date:         r["Data"]         || ""
    }));
    res.json(data);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: e.message });
  }
});

// --- API: EVENTS2 (niestandardowe) ---
app.get("/api/events2", async (req, res) => {
  try {
    const sheet = await getSheet("Events2");
    const rows  = await sheet.getRows();
    const data = rows.map(r => {
      const parts = [];
      for (let col of ["Zawodnik A","Zawodnik B","Zawodnik C","Zawodnik D"]) {
        const v = r[col]||"";
        if (v.trim()) parts.push(v.trim());
      }
      return {
        id:           r._rowNumber,
        participants: parts,
        winner:       r["ZwyciÄ™zca"] || "",
        gala:         r["Gala"]       || "",
        date:         r["Data"]       || ""
      };
    });
    res.json(data);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: e.message });
  }
});

// Serwuj avatary
app.use("/avatars", express.static(path.join(__dirname, "public", "avatars")));
// Serwuj React build
app.use(express.static(path.join(__dirname, "..", "build")));
// SPA catch-all (tylko raz, na samym koÅ„cu)
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "..", "build", "index.html"));
});

app.listen(PORT, () =>
  console.log(`ğŸš€ Serwer dziaÅ‚a na http://0.0.0.0:${PORT}`)
);
